<?php

namespace BulkCurrencyEditorCURCY\Http\Controllers;

if (! defined('ABSPATH')) {
		exit;
}

use BulkCurrencyEditorCURCY\Http\Controllers\Controller;
use Illuminate\Database\Capsule\Manager as Capsule;
use Illuminate\Support\Facades\DB;
use BulkCurrencyEditorCURCY\WPBones\Database\DB as DBC;

class ProductEditor extends Controller
{
	public function index()
	{
		// GET
		global $wpdb;
		$capsule = new Capsule;
		$capsule->addConnection(BulkCurrencyEditorCURCY()->config('database.connections.mysql'));
		$capsule->setAsGlobal();
		$capsule->bootEloquent();
		$products = $capsule->table('posts')
			->select('posts.ID as ID', 'posts.post_title as title', 'postmeta.meta_id as meta_id', 'postmeta.meta_value as meta_value', 
				DB::raw('(SELECT '.$wpdb->prefix.'postmeta.meta_value FROM '.$wpdb->prefix.'postmeta WHERE '.$wpdb->prefix.'postmeta.post_id = '.$wpdb->prefix.'posts.ID AND '.$wpdb->prefix.'postmeta.meta_key = "_regular_price" LIMIT 1) as _regular_price'),
				DB::raw('(SELECT '.$wpdb->prefix.'postmeta.meta_value FROM '.$wpdb->prefix.'postmeta WHERE '.$wpdb->prefix.'postmeta.post_id = '.$wpdb->prefix.'posts.ID AND '.$wpdb->prefix.'postmeta.meta_key = "_sale_price" LIMIT 1) as _sale_price'),
				DB::raw('(SELECT '.$wpdb->prefix.'postmeta.meta_value FROM '.$wpdb->prefix.'postmeta WHERE '.$wpdb->prefix.'postmeta.post_id = '.$wpdb->prefix.'posts.ID AND '.$wpdb->prefix.'postmeta.meta_key = "_sale_price_wmcp" LIMIT 1) as _sale_price_wmcp')
			)
			->join('postmeta', 'postmeta.post_id', '=', 'posts.ID')
			->whereIn('postmeta.meta_key', ['_regular_price_wmcp'])
			->where('posts.post_type', 'product')
			->where('posts.post_status', 'publish')->get();


		foreach ($products as $key => $product) {
			// code...
			if($product->meta_value == "{LKR:,INR:,USD:,GBP:}"){
				$product->meta_value = '{"LKR":"","INR":"","USD":"","GBP":""}';
			}
			$product->meta_value = json_decode($product->meta_value);

			if($product->_sale_price_wmcp == "{LKR:,INR:,USD:,GBP:}"){
				$product->_sale_price_wmcp = '{"LKR":"","INR":"","USD":"","GBP":""}';
			}
			$product->_sale_price_wmcp = json_decode($product->_sale_price_wmcp);
		}

		$data = array(
			'products' => $products, 
		);
		//jquery.dataTables.min.css
		return BulkCurrencyEditorCURCY()->view('dashboard.index')
		->with($data)
		->withAdminStyles('jquery.dataTables.min')
		->withAdminStyles('bootstrap')
		->withAdminStyles('datatable.theme')
		->withAdminScripts('jquery.dataTables.min')
		->withAdminScripts('datatable.prep');
	}

	public function store()
	{
		// POST

		$selected_products = collect($_REQUEST['selected_products']);
		
		if($selected_products != null && !empty($selected_products)){
			foreach ($selected_products as $key => $meta_id) {
				// code...
				$postme = DBC::table('postmeta')
				            ->select('meta_value')
				            ->where('meta_id', $meta_id)
				            ->limit(1)
				            ->get();
				$dec = ($postme[0]->meta_value);
				//$dec = 10;
				print_r($dec);
				/*$newprices = array(
					'LKR' => $postme[0]->meta_value, 
					'GBP' => 0, 
					'INR' => 0, 
					'USD' => 0, 
				);*/
				//$s = serialize($newprices);
				print_r($dec);
			}
		}
		//print_r($request);
	}

	public function update()
	{
		// PUT AND PATCH
		wpbones_logger()->info('Hello, World');
		dd($this->request);
	}

	public function destroy()
	{
		// DELETE
	}

}